
# LiquidFun Essentials

The [LiquidFun](https://google.github.io/liquidfun/) physics system allows you to simulate faucets, pools, waves, streams, and other amazing <nobr>physics-based</nobr> effects similar to those featured in <nobr>Corona-powered</nobr> games like [Freeze! 2 &ndash; Brothers](http://freeze2.com) or other games where the physics world is not composed entirely of rigid objects. In addition to basic liquid effects, you can implement <nobr>semi-liquid</nobr> elastic/gelatin objects, create liquids that color mix and blend together when they come in contact, detect and manipulate "regions" of the liquids, and more.

<iframe width="560" height="315" src="https://www.youtube.com/embed/kbAwJtuRV0U?rel=0&showinfo=0" frameborder="0" allowfullscreen></iframe>


## Particle Systems

In LiquidFun, all liquids are represented by a __particle&nbsp;system__, meaning that a stream or pool is made up of many "particles" which interact together to simulate the desired effect. Each particle is round and they are the minimal unit of matter in a particle system. By default, a particle behaves as a liquid, but you can change the behavior of individual particles or groups of particles. You can also set particle properties like position, velocity, and color.

<div class="guide-notebox-imp">
<div class="notebox-title-imp">Important</div>

Particles defined by the LiquidFun framework are __not__ related to <nobr>emitter-based</nobr> particles that are generated by [display.newEmitter()][api.library.display.newEmitter]. In other words, these two particle types are __distinct&nbsp;objects__ from different libraries and they will not interact with each other physically&nbsp;&mdash; in fact, <nobr>emitter-based</nobr> particles do not support physical collisions whatsoever.

</div>

In Corona, you create a [ParticleSystem][api.type.ParticleSystem] object via the [physics.newParticleSystem()][api.library.physics.newParticleSystem] function:

``````lua
physics.newParticleSystem( params )
``````

In this API, `params` is a table of parameters with only one __required__ element: the file&nbsp;name (`filename`) of the particle image to render for each particle instance:

``````{ brush="lua" gutter="false" first-line="1" highlight="[6]" }
local physics = require( "physics" )
physics.start()
 
local testParticleSystem = physics.newParticleSystem(
{
	filename = "particle.png"
})
``````

However, to make your particle system behave better, you should specify a couple additional properties. At minimum, you should define the particle `radius` to control the size of the particles which constitute the liquid effect. Another useful parameter is `imageRadius` which, if&nbsp;defined, will instruct Corona to render the particle __image__ at a different size than the physical body defined by `radius`. Essentially, if `imageRadius` is slightly larger than `radius`, the particles will overlap somewhat, resulting in a more cohesive <nobr>liquid-like</nobr> appearance.

``````{ brush="lua" gutter="false" first-line="1" highlight="[7,8]" }
local physics = require( "physics" )
physics.start()
 
local testParticleSystem = physics.newParticleSystem(
{
	filename = "particle.png",
	radius = 2,
	imageRadius = 4
})
``````

The complete list of other parameters and their purpose is beyond the scope of this tutorial, so please refer to the [documentation][api.library.physics.newParticleSystem#parameter-reference] or the [LiquidFun Programmer's Guide](https://google.github.io/liquidfun/Programmers-Guide/html/md__chapter11__particles.html) for more information.


## Creating Particles

Once you have an established particle system, new particles are generated using the [object:createParticle()][api.type.ParticleSystem.createParticle] method. This accepts a table of optional parameters which control the behavior of each generated particle, for&nbsp;example:

``````lua
testParticleSystem:createParticle(
{
	x = 0,
	y = 0,
	velocityX = 256,
	velocityY = 480,
	color = { 1, 0.2, 0.4, 1 },
	lifetime = 32.0,
	flags = { "water", "colorMixing" }
})
``````

Most of these parameters are <nobr>self-explanatory</nobr>:

* `x` and `y` determine where the new particle is generated in content space.
* `velocityX` and `velocityY` specify the starting velocity values for the new particle.
* `color` is a table of RGB+A values for the particle.
* `lifetime` defines how many seconds the particle remains on screen before it dies.
* `flags` can be either a string or a table of strings which dictate various behavioral aspects of the particle. These options are beyond the scope of this tutorial, so please refer to the [LiquidFun Programmer's Guide](https://google.github.io/liquidfun/Programmers-Guide/html/md__chapter11__particles.html) for more information.

<div class="docs-tip-outer">
<div class="docs-tip-inner-left">
<div class="fa fa-cog"></div>
</div>
<div class="docs-tip-inner-right">

It's important to note that [object:createParticle()][api.type.ParticleSystem.createParticle] creates just __one__ particle in the overall system, so to create a useful scenario, you'll need to generate numerous particles by calling this function on a repeating timer or via some other repeating method. For&nbsp;instance:

``````lua
local physics = require( "physics" )
physics.start()

local testParticleSystem = physics.newParticleSystem(
{
	filename = "particle.png",
	radius = 2,
	imageRadius = 4
})

local function onTimer( event )

	testParticleSystem:createParticle(
	{
		x = 0,
		y = 0,
		velocityX = 256,
		velocityY = 480,
		color = { 1, 0.2, 0.4, 1 },
		lifetime = 32.0,
		flags = { "water", "colorMixing" }
	})
end

timer.performWithDelay( 20, onTimer, 0 )
``````

</div>
</div>


## Creating Particle Groups

In addition to creating single particles in a system, you can create __groups__ of related particles using the [object:createGroup()][api.type.ParticleSystem.createGroup] function. Essentially, this "fills" a defined region with multiple particles in one command and the group can be assigned various behavioral and visual properties. For&nbsp;example:

``````lua
local physics = require( "physics" )
physics.start()

local testParticleSystem = physics.newParticleSystem(
{
	filename = "particle.png",
	radius = 2,
	imageRadius = 4
})

testParticleSystem:createGroup(
{
	x = 0,
	y = 0,
	color = { 0, 0.3, 1, 1 },
	halfWidth = 64,
	halfHeight = 32,
	flags = { "water", "colorMixing" }
})
``````

This code generates a __rectangular__ particle group, but you can also create circular groups and arbitrary shape groups. Please refer to the [documentation][api.type.ParticleSystem.createGroup#parameter-reference] for information on creating different group types.


## Applying Force/Impulse

Linear force can be applied to the center of all particles in a particle system via the [object:applyForce()][api.type.ParticleSystem.applyForce] API. This method accepts two numerical values indicating the amount of force to apply in the __x__ and __y__ directions respectively. For&nbsp;instance:

``````lua
testParticleSystem:applyForce( 0, -9.8 * testParticleSystem.particleMass )
``````

Alternatively, you can apply a linear __impulse__ to all particles with the [object:applyLinearImpulse()][api.type.ParticleSystem.applyLinearImpulse] API. This is similar to the above method except that an impulse is a single momentary jolt in <nobr>newton-seconds</nobr>. For&nbsp;example:

``````lua
testParticleSystem:applyLinearImpulse( 0, -9.8 * testParticleSystem.particleMass )
``````


## Region Querying

While generating individual particles and even groups of particles can provide for some amazing effects, at some point you may need to detect and manipulate particles within a defined region. This is accomplished via the [object:queryRegion()][api.type.ParticleSystem.queryRegion] function using the following syntax:

``````lua
ParticleSystem:queryRegion( upperLeftX, upperLeftY, lowerRightX, lowerRightY, hitProperties )
``````

The defined region must be rectangular and it's defined by the first four parameters&nbsp;&mdash; simply specify the <nobr>upper-left</nobr> corner <nobr>(`upperLeftX`/`upperleftY`)</nobr> and the <nobr>lower-right</nobr> corner <nobr>(`lowerRightX`/`lowerRightY`)</nobr> to query in a rectangular region created by these coordinates.

The last parameter, `hitProperties`, is a table of optional properties which can be applied to each particle in the region. Valid properties include:

* `deltaX` &mdash; The __x__ position delta to apply to each particle.
* `deltaY` &mdash; The __y__ position delta to apply to each particle.
* `velocityX` &mdash; The __x__ velocity delta to apply to each particle.
* `velocityY` &mdash; The __y__ velocity delta to apply to each particle.

So, if you want to apply an upward __y__ velocity to all particles in a region, the code may look like this:

``````lua
local hits = testParticleSystem:queryRegion( 10, 40, 100, 160, { velocityY=-40 } )
``````

<div class="guide-notebox">
<div class="notebox-title">Note</div>

All of the values potentially applied in the `hitProperties` table are __delta__ values that will be applied to each particle's current associated value(s). For example, if you apply a `velocityY` of `-40` to the particles in the region, it does not directly set `-40` as the actual __y__ velocity on them, but rather it applies that velocity in delta relation to any existing velocity the particles already have.

</div>


## Particle Collisions

Detecting collision events between LiquidFun particles and other physical objects is an <nobr>in-depth</nobr> topic beyond the scope of this tutorial. Please see the [LiquidFun Particle Collisions][tutorial.games.collisionsLiquidFun] tutorial for more details on this topic.


## Conclusion

This tutorial is meant to be a brief introduction to LiquidFun physics in Corona, but the capabilities of the framework extend beyond this scope. Please consult the [documentation][api.library.physics.newParticleSystem#parameter-reference] or the [LiquidFun Programmer's Guide](https://google.github.io/liquidfun/Programmers-Guide/html/md__chapter11__particles.html) for more information.
